// Generated by view binder compiler. Do not edit!
package com.example.a2340collegescheduler.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.a2340collegescheduler.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AddAssignmentsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button addAssignmentButton;

  @NonNull
  public final EditText editAssignmentTime;

  @NonNull
  public final EditText editAssignmentTitle;

  @NonNull
  public final EditText editDueDate;

  @NonNull
  public final TextView labelAssociatedClass;

  @NonNull
  public final Spinner spinnerAMPM;

  @NonNull
  public final Spinner spinnerAssociatedClass;

  private AddAssignmentsBinding(@NonNull RelativeLayout rootView,
      @NonNull Button addAssignmentButton, @NonNull EditText editAssignmentTime,
      @NonNull EditText editAssignmentTitle, @NonNull EditText editDueDate,
      @NonNull TextView labelAssociatedClass, @NonNull Spinner spinnerAMPM,
      @NonNull Spinner spinnerAssociatedClass) {
    this.rootView = rootView;
    this.addAssignmentButton = addAssignmentButton;
    this.editAssignmentTime = editAssignmentTime;
    this.editAssignmentTitle = editAssignmentTitle;
    this.editDueDate = editDueDate;
    this.labelAssociatedClass = labelAssociatedClass;
    this.spinnerAMPM = spinnerAMPM;
    this.spinnerAssociatedClass = spinnerAssociatedClass;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AddAssignmentsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AddAssignmentsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.add_assignments, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AddAssignmentsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addAssignmentButton;
      Button addAssignmentButton = ViewBindings.findChildViewById(rootView, id);
      if (addAssignmentButton == null) {
        break missingId;
      }

      id = R.id.editAssignmentTime;
      EditText editAssignmentTime = ViewBindings.findChildViewById(rootView, id);
      if (editAssignmentTime == null) {
        break missingId;
      }

      id = R.id.editAssignmentTitle;
      EditText editAssignmentTitle = ViewBindings.findChildViewById(rootView, id);
      if (editAssignmentTitle == null) {
        break missingId;
      }

      id = R.id.editDueDate;
      EditText editDueDate = ViewBindings.findChildViewById(rootView, id);
      if (editDueDate == null) {
        break missingId;
      }

      id = R.id.labelAssociatedClass;
      TextView labelAssociatedClass = ViewBindings.findChildViewById(rootView, id);
      if (labelAssociatedClass == null) {
        break missingId;
      }

      id = R.id.spinnerAMPM;
      Spinner spinnerAMPM = ViewBindings.findChildViewById(rootView, id);
      if (spinnerAMPM == null) {
        break missingId;
      }

      id = R.id.spinnerAssociatedClass;
      Spinner spinnerAssociatedClass = ViewBindings.findChildViewById(rootView, id);
      if (spinnerAssociatedClass == null) {
        break missingId;
      }

      return new AddAssignmentsBinding((RelativeLayout) rootView, addAssignmentButton,
          editAssignmentTime, editAssignmentTitle, editDueDate, labelAssociatedClass, spinnerAMPM,
          spinnerAssociatedClass);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
